   <extension
         point="org.eclipse.ui.elementFactories">
      <factory
            class="org.eclipse.ui.part.FileEditorInputFactory"
            id="org.eclipse.ui.part.FileEditorInputFactory">
      </factory>
      <factory
            class="org.eclipse.ui.ide.FileStoreEditorInputFactory"
            id="org.eclipse.ui.ide.FileStoreEditorInputFactory">
      </factory>
	</extension>
      <extension
         id="org.eclipse.ui.ide.resourceMappingAdapters"
         point="org.eclipse.core.runtime.adapters">
	       <factory
	             adaptableType="org.eclipse.ui.IFileEditorInput"
	             class="org.eclipse.ui.internal.ide.model.FileInputAdapterFactory">
	          <adapter
	                type="org.eclipse.core.resources.IFile">
	          </adapter>
	          <adapter
	                type="org.eclipse.core.resources.IResource">
	          </adapter>
	       </factory>
	       <factory
	             adaptableType="org.eclipse.ui.ide.FileStoreEditorInput"
	             class="org.eclipse.ui.internal.ide.model.FileStoreInputAdapterFactory">
	          <adapter type="org.eclipse.core.filesystem.IFileStore"/>
	       </factory>
       </extension>
    <extension
          point="org.eclipse.core.filebuffers.documentCreation">
       <factory
             class="com.fimet.uc.editor.SimQueueDocumentCreation"
             extensions="sim_queue">
       </factory>
    </extension>

    <extension
          point="org.eclipse.ui.editors.documentProviders">
       <provider
             class="com.fimet.uc.editor.SimQueueDocumentProvider"
             extensions="sim_queue"
             id="com.fimet.uc.editor.SimQueueDocumentProvider">
       </provider>
    </extension>

    <extension
          point="org.eclipse.core.runtime.adapters">
       <factory
             adaptableType="org.eclipse.ui.IFileEditorInput"
             class="com.fimet.uc.editor.SimQueueInputAdaptableFactory">
          <adapter
                type="org.eclipse.core.resources.IFile">
          </adapter>
       </factory>
    </extension>


LocalFile

public class SimQueueFileStore extends FileStore {
	private final URI location;

	public SimQueueFileStore(URI location) {
		this.location = location;
	}

	@Override
	public String[] childNames(int options, IProgressMonitor monitor) {
		return FileStore.EMPTY_STRING_ARRAY;
	}

	@Override
	public IFileInfo fetchInfo(int options, IProgressMonitor monitor) {
		FileInfo result = new FileInfo();
		result.setDirectory(true);
		result.setExists(true);
		result.setLastModified(1);//last modified of zero indicates non-existence
		return result;
	}

	@Override
	public void delete(int options, IProgressMonitor monitor) {
		//nothing to do - virtual resources don't exist in any physical file system
	}

	@Override
	public IFileStore getChild(String name) {
		return EFS.getNullFileSystem().getStore(new Path(name).makeAbsolute());
	}

	@Override
	public String getName() {
		return "sim_queue"; //$NON-NLS-1$
	}

	@Override
	public IFileStore getParent() {
		return null;
	}

	@Override
	public void move(IFileStore destination, int options, IProgressMonitor monitor) throws CoreException {
		destination.mkdir(EFS.NONE, monitor);
	}

	@Override
	public InputStream openInputStream(int options, IProgressMonitor monitor) {
		return null;
	}

	@Override
	public URI toURI() {
		return location;
	}
}
